exports.process = function (xmlObj) {
    // Create result object, containing objectives object
    var result = {};
  	var events = {};

    // Two objectives: Get ready script and green flag script!

    events['getready event'] = false; // receiveGo
    events.placeat = false;
    events.placeatdot = false;

    events.Run = false;

    events['greenflag event'] = false;
    events['pen down'] = false;
    events['glide block'] = false;
    events['glide to other dot'] = false;
  	events.progress = 0;
    events['progress.txt'] = "";
    events.completed = false;
    

    result.html = "";

    var error_type = 0;
    var start_dot = 0; // 0 = none, 1 = pink, 2 = blue
    var explain = "";
    var pendown = false;


    //###########################################################################//
                // Parse XML
    try{
        // see if scripts added match inert script
xmlObj.project.stage[0].sprites[0].sprite.forEa√•ch(function(v){
  if (v.$.devName == "Alga") {
    v.scripts[0].script.forEach(function(scr){
		// check the get ready script
      if (scr.block[0].$.s == "receiveGo"){
  //result.html += "Found the get ready script!";
  //result.html +=  scr.block.length + "blocks<br>";
        events['getready event'] = true;
                        // iterate through to be more flexible
    		    // they might want to initialize pen color!
        for (var i = 1; i < scr.block.length; i++) {
                            //result.html += "Block: " + scr.block[i].$.s + "<br>";
     			// allow both glide to and place at for get ready script
    			// OR operator does not work!!!
          if (scr.block[i].$.s == "doSpeedGlidetoObject")
    			{
    			  explain = "The <b><i>glide to</i></b> block is too slow for the <b><i>Get Ready</i></b> script!  Use <b><i>place at</i></b> instead.";
    			}
          else if (scr.block[i].$.s == "doGotoObject") {
    //result.html += "Found glide or place<br>";
            if (events.placeat !== true){
    			    var arg = 1;
    			    if(scr.block[i].$.s == "doGotoObject")
    				    arg = 0;
                events.placeat = true;
                if (scr.block[i].l[arg] == "Blue Dot")
                {
                    start_dot = 2;
                    events.placeatdot = true;
                }
                else if (scr.block[i].l[arg] == "Pink Dot")
                {
                    start_dot = 1;
                    events.placeatdot = true;
                }
    			    else
        				explain = "Choose and set a starting dot!";
    			  } // if placeat was not true
    			  else // if this is the 2nd place/glide block!
    			  {
              events.placeatdot = false;
    				  explain = "Only place or glide once in the get ready script.";
    			  }
          } // if doGotoObject
          else if (scr.block[i].$.s == "down"){
    				pendown = true;
            events['pen down'] = true;
    			}
    			else if (scr.block[i].$.s == "up")
    				pendown = false;
  		  } // end for each block in script
      } // end of get ready script

	/* ***** Diana - need to add flexibility for where pen down is */
	/* Need to test green flag script */

		    // green flag script
      else if ((scr.block[0].$.s == "getReady") && (explain === "")){
        events['greenflag event'] = true;
        // iterate through to be more flexible
        // they might want to put pen down in get ready script!
        for (var i = 1; i < scr.block.length; i++) {
          //result.html += "Block: " + scr.block[i].$.s + "<br>";
  // if pen down, record pen is down 
          if (scr.block[i].$.s == "down"){
            events['pen down'] = true;
            pendown = true;
          }
  			  // if pen is picked up, record
  			  else if (scr.block[i].$.s == "up")
  				  pendown = false;
  			  // if it is cleared after glide, discount glide
  			  else if (scr.block[i].$.s == "clear")
          {
            if (events['glide to other dot'] === true){
              events['glide to other dot'] = false;
              explain = "Oh, no!  You erased the line!";
  			    }
  			  }
          else if ((scr.block[i].$.s == "doGotoObject") ||
           (scr.block[i].$.s == "doSpeedGlidetoObject")){
    			  var arg = 1;
    			  if(scr.block[i].$.s == "doGotoObject")
    				arg = 0;      
            events['glide block'] = true;
    			  if (pendown === true)
    			  {
              if (scr.block[i].l[arg] == "Blue Dot"){
                if (start_dot != 2)
                  events['glide to other dot'] = true;
                else
                  explain = "Choose a different dot than the starting dot!";
              } // blue dot glide
    			    else if (scr.block[i].l[arg] == "Pink Dot"){
                if (start_dot != 1)
                  events['glide to other dot'] = true;
                else
                  explain = "Choose a different dot than the starting dot!";
              } // pink dot glide
              else
                explain = "Make sure you choose where to glide to!";
    			  } // end of if pen is down
    			  else // if pen is not down yet, ...
    			  {
              explain = "Make sure the pen is down <i><b>before</b></i> moving Alga!";
    			  }
          } // glide to
    		} // for each block
      } // green flag script

      if (scr.block[0].$.s == "getReady" && scr.block[0].$.isInert=="false"){
        events['correct event'] = true;
        if (scr.block[1].$.s == "down")  
          events['pen down'] = true;
        if (scr.block[2].$.s == "doSpeedGlidetoObject"){
          events['glide block'] = true;
          if (scr.block[2].l[1] == "Blue Dot")            
            events['glide to blue dot'] = true;
        }
      }
    });
  }
});

        // see if project was tested before green check mark was clicked
        xmlObj.project.variables[0].variable.forEach(function(v){

          // Variable "tested": if 1 -> continue analysis, if 0 -> all false
          if(v.$.name == "tested") {
              if(v.l == "1")
                  events.Run = true;
          }
        });
    }
    catch(err){
        events.html = "ERROR";
    }
    finally{
    //###########################################################################//
                // Determine whether activity in completed

    var completed = true;
    for (var property in events) {
        if (events[property] !== true) {
            completed = false;
        }
    }
    events.completed = completed;

    //###########################################################################//
                    // Feedback strings
    error_type = -1;
    // print out errors for the get ready script
    if (!events['getready event']) {
      events.progress = 0;
      events['progress.txt'] = "no blue square block\n";
    }
    else if (!events.placeat) {
      events.progress = 1;
      events['progress.txt'] = "has blue square\n";
    }
    else if (!events.placeatdot) {
      events.progress = 2;
      events['progress.txt'] = "has place at\n";
    } else {
      events.progress = 3;
      events['progress.txt'] = "places at dot\n";
    }
    // if there were no errors in get ready script, check green flag
    //else
    //{
      // print out errors for the green flag script
  	if (!events['greenflag event']) {
      events['progress.txt'] += "no green flag\n";
  	}
  	else {
      events.progress += 4;
      events['progress.txt'] += "has green flag\n";
    }


    if (!events['pen down']) {
      events['progress.txt'] += "no pen down\n";
    } else {
      events['progress.txt'] += "pen down\n";
      events.progress += 8;
    }

  	if (!events['glide block']){
      events['progress.txt'] += "no glde block \n";
  	}
  	else {
      events['progress.txt'] += "has glde block\n";
      events.progress += 16;
    }

    if (!events['glide to other dot'] ) {
      events['progress.txt'] += "doesn't have the second glide\n";
    } else {      
      events.progress += 32;
      events['progress.txt'] = "has second glide\n";
 		}	

    // if (!events.Run){
    //   events.progress =  8;
    //   events['progress.txt'] = "moved Alga twice";
    // }
    // else
    // {
    //   events.progress = 9;
    //   events['progress.txt'] += "tested";
    //   completed = true;
    // }

    if (events.progress == 63){
      events.completed = true;
      events['progress.txt'] = "done";
    }
  




   // If all objectives are completed, result.completed = true
    result.results = events;
    return result;
  }
};



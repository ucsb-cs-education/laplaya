// Author: Iris
// honey walk 


exports.process = function (xmlObj) {
    // Create result object, containing objectives object
    var result = {};
  	var events = {};

    // Only one objective for Animal Maze (get all the honey pots)
    events.Run = false;
    events.Complete = false;
    events['Correct event']=false;
    events['motion block'] = false;
    events.success = false;
    events.rightMovement = "";
    events.hmtl = "";
    var error_type;
    result.html = "";
    events.distance = 0;

    var not_tested = false;
    var not_completed = false;

     //###########################################################################//
                            //Parse XML//
    try{
        xmlObj.project.stage[0].sprites[0].sprite.forEach(function(w){
            if (w.$.devName == "Bear"){
                console.log("IN BEAR");
                w.scripts[0].script.forEach(function(u){
					if (u.block[0].$.s == "getReady" && u.block[0].$.isInert == "false" && u.block[0].$.isFrozen == "false")
					{   
					   events['Correct event']=true;
					   console.log(u.block[1].$.s);
			   // allow blocks to be in any order
					   for (var i = 1; i < u.block.length; i++)
					   {
						  // we don't really care about pen down - either way is fine
								  //if (u.block[i].$.s == "down") result['objectives']['pen down'] = true;                                        
						if (u.block[i].$.s == "doSpeedGlideSteps") 
						  {
								events['motion block'] = true;
								events.distance += parseInt(u.block[i].l[0]);
						  } // if glide block
						} // for each block in the green flag script
		   
					}
				});
				if (events.distance >= 40 && events.distance <= 60) { 
					events.success = true;
					events.rightMovement = "good";
				} else if (events.distance > 60)
					events.rightMovement = "too far";
				else 
					events.rightMovement = "not far enough";
            }
        });

        xmlObj.project.variables[0].variable.forEach(function(v){
        // Variable "tested": if 1 -> continue analysis, if 0 -> all false
            if(v.$.name == "tested") {
                if(v.l == "1")
                    events.Run = true;
                else {
                    events.completed = false;
                    not_tested = true;
                }
            }
        // Variable "completed": if 1 -> true, 0 -> false
            else if(v.$.name == "completed") {
                if(v.l == "1"){
                    events.Complete = true;
                    error_type = 0;
                    result.error_type = error_type;
                //    result.html = "Good job! You've completed this task.";
                }
                 else{
                    //result.html += "You are not done yet. Keep working on it!";
                    not_completed = true;
                }
            }
        });
     }
     catch(err){
     	events.html += "ERROR";
     }   
    finally{
    	  //###########################################################################//
                        // Feedback
        if (!events['Correct event']){
          events.progress = 0;
          events['progress.txt'] = "hasn't started\n";
        }
        else if (!events['motion block']){
          events.progress = 1;
          events['progress.txt'] = "has green flag block\n";
        }
        else if (!events.success){
          events['progress.txt'] = "moved\n";
          if (events.rightMovement == "too far"){
          	events.progress = 3;
          	events['progress.txt'] += " too far\n";
          } else if (events.rightMovement == "not far enough"){
          	events.progress = 2;
          	events['progress.txt'] += "undershot";
          }
          
        } else {
          events.progress = 4;
          events['progress.txt'] = "done";         
        }
             
             
             
                 
       //if (events.Run){
       //	  events.progress += 5;
       //	  events['progress.txt'] += "tested";
       //} 
       

        // If all objectives are completed, result.completed = true
        var completed = true;
        for (var property in events) {
            if (events.property !== true) {
                completed = false;
            }
        }
        events.completed = completed;
        result.results = events;
        return result;
  }
};

// analysis for the module 1 design project (2014-2015)
/* designed to include the blocks visible with the bug (the original design 
 * activity restricted what blocks you could use, but if you reset the activity, 
 * more blocks appeared.)
 */

exports.process = function (xmlObj) {
	var result = {};
	var events = {};
	
	// loop through blockNames to get #use per block
	// loop through categoryNames to get #use per category 
	
	events.uniqueBlocks = 0; // capture number of unique blocks used
	events.uniqueCategories = 0;
	events.blockTotal = 0;
	events.eventBlocks = 0; // capture number of unique event blocks 
	
	events.scriptsTotal = 0;
	events.spritesTotal = 0;
	events.maxLen = 0;
	events.medianLen = 0;
	
	events.html += "";

	var categoriesUsed = []; // collect unique categories used
	var blocksUsed = []; // collect unique blocks that have been used
	var eventBlocksUsed = []; // collect unique event blocks used
	var scriptLen = []; // get the length of each script

	// all the block names; 
	var blockNames  = Array("bubble", "changeEffect", "clear", "clearEffects",
	 "doAsk", "doBroadcast", "doFaceTowards", "doForever", "doGlideCoord", 
	 "doGlideDirection", "doGotoObject", "doHideVar", "doIfElse", "doRepeat",
	 "doSayFor", "doSetVar", "doShowVar", "doSpeedGlideSteps", "doSpeedGlidetoObject",
	 "doSwitchToCostume", "doThink", "doThinkFor", "doUntil", "doWait", 
	 "doWaitUntil", "doWearNextCostume", "down", "getReady", "gotoXYNegative",
	 "hide", "incDecScale", "otherReceiveClick", "placeDirection", "playSound",
	 "receiveClick", "receiveGo", "receiveKey", "receiveMessage", "reportModulus",
	 "setColor", "setEffect", "setHeading", "setScaleDropDown", "show", "turn",
	 "turnLeft", "up");

	// sort the block names into their categories:
	var motionBlocks = Array("doFaceTowards", "doGlideCoord", 
	 "doGlideDirection", "doGotoObject", "doSpeedGlideSteps", "doSpeedGlidetoObject",
	 "gotoXYNegative", "placeDirection", "setHeading", "turn",
	 "turnLeft");
	motionBlocks.name = "motionBlocks";

	var looksBlocks = Array("bubble", "changeEffect",  "clearEffects", "doSayFor",
	 "doSwitchToCostume", "doThink", "doThinkFor", "doWearNextCostume", "hide",
	 "incDecScale", "setEffect", "setScaleDropDown", "show");
	looksBlocks.name = "looksBlocks";

	var sensingBlocks = Array("doAsk"); 
	sensingBlocks.name = "sensingBlocks";

	var varBlocks = Array("doHideVar", "doSetVar", "doShowVar");
	varBlocks.name = "varBlocks";

	var eventsBlocks = Array("doBroadcast", "getReady", "otherReceiveClick", 
		"receiveClick", "receiveGo", "receiveKey", "receiveMessage");
	eventsBlocks.name = "eventsBlocks";

	var controlBlocks = Array( "doForever", "doIfElse", "doRepeat",  "doUntil",
	 "doWait", "doWaitUntil", "reportModulus");
	controlBlocks.name = "controlBlocks";

	var soundBlocks = Array("playSound");
	soundBlocks.name = "soundBlocks";

	var penBlocks = Array("clear", "setColor", "down", "up");
	penBlocks.name = "penBlocks";

	var categoryNames = Array(motionBlocks, looksBlocks, sensingBlocks, 
		varBlocks, eventsBlocks, controlBlocks, soundBlocks, penBlocks);


	for (var i = 0; i < blockNames.length; i++){
		var block_name = blockNames[i];
		events[block_name] = 0;
	}

	for (i = 0; i < categoryNames.length; i++){
		var category_name = categoryNames[i].name;
		events[category_name] = 0;
	}

try{
	//var hasScript = 0;
	// iterate over all the sprites:
	if(xmlObj.project.stage[0].sprites[0].sprite) {
			events.html += "1";
			xmlObj.project.stage[0].sprites[0].sprite.forEach(function (sprites) {
				events.html += "2";
				//events.html += "sprite: " + sprites.$.devName + ", ";
				var scripts = sprites.scripts[0];
				if (scripts.length !== 0) { // if sprite is not empty
					events.spritesTotal += 1;
				}
				if (sprites.$.isInert != "true") {
					events.html += "3";
					//events.html += "non-inert, ";
					// iterate through all the scripts in this sprite:
					if(scripts.script) {
						var script = scripts.script;
						events.html += "4";
						//var scripts = sprites.scripts[0];
						var numScripts = script.length;
						//function readScripts (scripts) {
						//sprites.scripts[0].script.forEach(function (scr){
						for(var h = 0; h < numScripts; h++) {
							var scr = script[h];
							events.html += "5";
							// does the script start with an event block?:
							//events.html += "block? ";
							//var blocks = scr.block;
							if (scr.block) {
								var blocks = scr.block;
								events.html += "6";
								//events.html += "block, ";
								//function readBlocks(blocks) {
								var block = blocks[0].$.s;
								//events.html += "block: " + block + ", ";
								var i;
								if(!scr.inner) {
									if (eventsBlocks.indexOf(block) != -1){
										events.html += "7";
										// deal with the starter event block:
										if (eventBlocksUsed.indexOf(block) == -1){
											eventBlocksUsed.push(block);
										}
										events[block] += 1; 
										// add to total number of uses for this block
										if (blocksUsed.indexOf(block) == -1){ 
											// add block name to list of used blocks (if it isn't already there)
											blocksUsed.push(block);
										}
										var eventName = eventsBlocks.name;
										events[eventName] += 1; 
										// add to total number of uses for this category
										if (categoriesUsed.indexOf(eventName) == -1){
											// add this category to list of unique categories used
											categoriesUsed.push(eventName);
										}

										events.scriptsTotal ++;
									}
									i = 1;
								} else {
									i = 0;
								}
								// scr.length = #scripts in this sprite
								var numBlocks = blocks.length; 
								scriptLen.push(numBlocks); 
								events.blockTotal += numBlocks;
								// #blocks in this script
								// iterate through each block in the rest of the script:
								for (; i < numBlocks; i++){
									events.html += "8";
									block = blocks[i];
									if(block) {
										var blockName = block.$.s;
										events[blockName] += 1;
										if (blocksUsed.indexOf(blockName) == -1){ 
											blocksUsed.push(blockName);
										}
										// check the category of this block:
										for (var j = 0; j < categoryNames.length; j++){
											events.html += "9";
											category_name = categoryNames[j];
											// is the block in this category?:
											if (category_name.indexOf(blockName) != -1){
												events.html += "A";
												events[category_name.name] += 1;
												if (categoriesUsed.indexOf(category_name) == -1){
													events.html += "a";
													categoriesUsed.push(category_name);
												}
												if (category_name == eventsBlocks){
													events.html += "b";
													if (eventBlocksUsed.indexOf(blockName) == -1){
														events.html += "c";
														eventBlocksUsed.push(blockName);
													}
												}
											}
										}
                    var n;
                    var m;
												
										events.html += "d";
										var innerBlock = block.block;
										if (innerBlock) {
											events.html += "B";
											n = innerBlock.length;
											for (m = 0; m < n; m++) {
                        blocks.push(innerBlock[m]);
                        numBlocks ++;
											}
											//readBlocks(scr.block[i]);
										}
												
										events.html += "e";
										var innerScript = block.script;
										if (innerScript) {
											events.html += "C";
											n = innerScript.length;
											for (m = 0; m < n; m++) {
												innerScript[m].inner = true;
												script.push(innerScript[m]);
												numScripts ++;
                        //scripts.push(p[m]);
                        //numScripts ++;
											}
											//numScripts += n;
											//readScripts(scr.block[i]);
										}
									}
								}
							}
            }
          }
        }
      });
    }
  }
	catch(err){
		events.html += "oops! error!";
	}
	finally{
		events.html += "Z";
		events['wrong: message broadcast/receive'] = false;
		events['wrong: hide/show'] = false;
		events['wrong: pen'] = false;
		events['wrong: move/initialization'] = false;
		
    
		if(((blocksUsed.doBroadcast > 0) && (blocksUsed.receiveMessage === 0))||
			 ((blocksUsed.doBroadcast === 0) && (blocksUsed.receiveMessage > 0))) {
			events['wrong: message broadcast/receive'] = true;
		}
		
		if(((blocksUsed.hide > 0) && (blocksUsed.show === 0))||
			 ((blocksUsed.hide === 0) && (blocksUsed.show > 0))) {
			events['wrong: hide/show'] = true;
		}
		
		if(((blocksUsed.clear > 0) || (blocksUsed.setColor > 0) ||
				(blocksUsed.up > 0)) && (blocksUsed.down === 0)) {
			events['wrong: pen'] = true;
		}
		
		if(((blocksUsed.doGlideCoord > 0) || (blocksUsed.doGlideDirection > 0) || 
				(blocksUsed.doSpeedGlideSteps > 0) || (blocksUsed.doSpeedGlidetoObject > 0)) && 
			 ((blocksUsed.doGotoObject === 0) || (blocksUsed.gotoXYNegative === 0) ||
			 blocksUsed.receiveGo === 0)) {
			events['wrong: move/initialization'] = true;
		}
		
		events.uniqueBlocks = blocksUsed.length;
		events.uniqueCategories = categoriesUsed.length;
		events.eventBlocks = eventBlocksUsed.length;
		events.maxLen = Math.max.apply(null, scriptLen);

		// find the median script length:
		scriptLen.sort(function(a, b) {return a - b;});
		var len = scriptLen.length;
		var half = len / 2;
		var val;
		if ((len % 2) !== 0){
			val = scriptLen[Math.floor(half)];
		} else {
			val = (scriptLen[half] + scriptLen[half - 1]) / 2;
		}
		events.medianLen = val;


		result.results = events;
		return result;
	}
};
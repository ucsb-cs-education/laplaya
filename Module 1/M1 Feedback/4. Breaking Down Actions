// Author: Iris

exports.process = function(xmlObj){
 var result = {};
result['objectives'] = {};

result['objectives']['correct event']=false;
result['objectives']['number of direction blocks'] = false;
result['objectives']['motion block']=false;//true;

result['error_type'];
var error_type = 0;
var i = 1;


var dist_dir = [    {direction: "init", distance: 0},
		    {direction: "right", distance: 375},
                    {direction: "down", distance: 275},
                    {direction: "left", distance: 300},
                    {direction: "up", distance: 50},
                    {direction: "right", distance: 155},
                    {direction: "up", distance: 100},
                    {direction: "right", distance: 50},
                    {direction: "down", distance: 100},
                ];
   
var motion_block_num = 1;
result.html = "";

try{

// Function to avoid 8 different loops
    function check_glide_better(dir,dist){
            result['objectives']['motion block']= true;
//result.html += "Dir: "+dir+", distance: "+dist;
//result.html += "<br>Expects: Dir: "+dist_dir[motion_block_num].direction;
//result.html += ", distance: "+dist_dir[motion_block_num].distance+"<br>";
            if (dir != dist_dir[motion_block_num].direction)
             {
                result.html += "Uh, oh.  Check the direction on your <b><i>glide</i></b> number "+(motion_block_num)+"<br>";
                return false;
            }
            else if (dist > (dist_dir[motion_block_num].distance-10*motion_block_num) &&
                dist < (dist_dir[motion_block_num].distance+10*motion_block_num))
            {
                motion_block_num = motion_block_num+1;
                return true;
            }
            else  {
                result.html = "Great work so far.  Check the number of steps on your <b><i>glide</i></b> number "+(motion_block_num)+"<br>";
                result.html += "If you need help find the number of steps, click the # button.  That displays a grid.  Each grid square is 100 steps.<br>";
                return false;
            }
    }
 
    xmlObj.project.stage[0].sprites[0].sprite.forEach(function(w){
            if (w.$.devName == "Explorer"){
                 w.scripts[0].script.forEach(function(u){
                if (u.block[0].$.s == "getReady")
                {
                    result['objectives']['correct event']=true;
                    var return_var;
		    for(var i = 1; i < u.block.length; i++)
		    {
                        block = u.block[i];
                        name = block.$.s;
			// place at - not allowed in green flag script
                        if (name == "doGotoObject")
                        {
                           result.html = "<b><i>place at</i></b> jumps the maze.  Use <i><b>glide</b></i>.";
                                return result;
                        }
			// glide block - check direction and distance
                        else if (name == "doGlideDirection")
                        {
                           if (!check_glide_better(block.l[1], parseInt(block.l[0])))
                                return result.html;
                        }
		    } // for each block in green flag script
                } // green flag script
            }); // for each script
            } // Explorer
        });
}
catch(err){}
finally{
    if (result['completed'] && result['objectives']['correct event'])
    {
        result.html = "GOOD JOB!";
        result['completed'] = true;
        error_type = 0;
        result['error_type'] = error_type;
        return result;
    }
    else if (!result['objectives']['correct event']){
        error_type = 1;
        result.html += "Make a script to make the explorer find the treasure!";
    }
    else if (!result['objectives']['motion block']){
        error_type=4;
        result.html += "Good start!<br> Look at the motion blocks to make the explorer move!";
    }
    else if (motion_block_num != 9){
        error_type = 6;
        result.html += "You're getting closer!<br>Keep adding <b><i>glide</i></b> blocks, setting the number of steps, and setting the direction!";
    }
    else
	result['completed'] = true;


    result['error_type'] = error_type;
    return result;
}
}

// Author: Iris

exports.process = function (xmlObj) {
    // Create result object, containing objectives object
    var result = {};
    result['objectives'] = {};

    // Only one objective for Animal Maze (get all the honey pots)
    result['objectives']['Run'] = false;
    result['objectives']['Complete'] = false;
    result['objectives']['Correct event']=false;
    //result['objectives']['pen down'] = false;
    result['objectives']['motion block'] = false;
    result['objectives']['success'] = false;
    result['error_type'];
    var error_type;
    result.html = "";

    var not_tested = false;
    var not_completed = false;

     //###########################################################################//
                            //Parse XML//
    try{
        xmlObj.project.stage[0].sprites[0].sprite.forEach(function(w){
            if (w.$.devName == "Bear"){
                console.log("IN BEAR");
                w.scripts[0].script.forEach(function(u){
                if (u.block[0].$.s == "getReady" && u.block[0].$.isInert == "false")
                {   
                   result['objectives']['Correct event']=true;
                   console.log(u.block[1].$.s);
		   // allow blocks to be in any order
		   for (var i = 1; i < u.block.length; i++)
		   {
		      // we don't really care about pen down - either way is fine
                      //if (u.block[i].$.s == "down") result['objectives']['pen down'] = true;                                        
                      if (u.block[i].$.s == "doSpeedGlideSteps") 
		      {
			 result['objectives']['motion block'] = true;
                         var distance = parseInt(u.block[i].l[0]);
                         if (distance > 40 && distance < 60)   
				result['objectives']['success'] = true;
		      } // if glide block
                   } // for each block in the green flag script
                }
            });
            }
        });

        xmlObj.project.variables[0].variable.forEach(function(v){
        // Variable "tested": if 1 -> continue analysis, if 0 -> all false
            if(v.$.name == "tested") {
                if(v.l == "1")
                    result['objectives']['Run'] = true;
                else {
                    result['completed'] = false;
                    not_tested = true;
                }
            }
        // Variable "completed": if 1 -> true, 0 -> false
            else if(v.$.name == "completed") {
                if(v.l == "1"){
                    result['objectives']['Complete'] = true;
                    error_type = 0;
                    result['error_type'] = error_type;
                //    result.html = "Good job! You've completed this task.";
                }
                 else{
                    //result.html += "You are not done yet. Keep working on it!";
                    not_completed = true;
                }
            }
        });
     }
     catch(err){}   
finally{
	  //###########################################################################//
                    // Feedback
    if (!result['objectives']['Correct event']){
        error_type = 1;
        result.html = "Make a script that will make the bear walk to the honey pot!  Look at the white example script if you are stuck!";
    }
    else if (!result['objectives']['motion block']){
        error_type = 4;
        result.html = "Great!  Now add a block that will make the bear move to the honey pot!";
    }
    else if (!result['objectives']['success']){
        error_type = 7;
        result.html = "Great!  Now look at the number of steps in your glide block.  Each square is 50 steps.  How far should the bear walk?";
    }
    else if (not_tested){
        result.html = "If you are finished, make sure you test it before clicking the green check button!";
        error_type = 2;
    }
    else if (not_completed){
        result.html += "You are not done yet. Keep working on it!";
        error_type = -1;
    }
    else{
        result.html = "Good job! You've completed this task.";
        error_type = 0;
	completed = true;
    }

    result['error_type'] = error_type;


    // If all objectives are completed, result.completed = true
    var completed = true;
    for (var property in result['objectives']) {
        if (result['objectives'][property] != true) {
            completed = false;
        }
    }
    result['completed'] = completed;

    return result;
    }
  };
